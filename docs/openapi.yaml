openapi: 3.0.3
info:
  title: Meeting Scheduler API DOcs
  description: >
    API for scheduling meetings across time zones.
    Helps find the optimal meeting time based on participants' availability.
  version: 1.0.0
  contact:
    name: Krushnna
    email: krushnnabaviskar9@gmail.com

servers:
  - url: "{protocol}://{host}:{port}{basePath}"
    description: Dynamic server
    variables:
      protocol:
        default: http
      host:
        default: localhost
      port:
        default: "8080"
      basePath:
        default: /api/v1

tags:
  - name: Events
    description: Operations related to events
  - name: TimeSlots
    description: Operations related to time slots
  - name: Users
    description: Operations related to users
  - name: Availability
    description: Operations related to user availability
  - name: Recommendations
    description: Operations related to time slot recommendations

paths:
  /events:
    get:
      summary: List all events
      operationId: getAllEvents
      tags:
        - Events
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new event
      operationId: createEvent
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Event ID
    get:
      summary: Get event details
      operationId: getEvent
      tags:
        - Events
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an event
      operationId: updateEvent
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Event updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete an event
      operationId: deleteEvent
      tags:
        - Events
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Event deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{id}/timeslots:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Event ID
    get:
      summary: Get all time slots for an event
      operationId: getTimeSlotsByEvent
      tags:
        - TimeSlots
      responses:
        '200':
          description: List of time slots for the event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new time slot for an event
      operationId: createTimeSlot
      tags:
        - TimeSlots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlotInput'
      responses:
        '201':
          description: Time slot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlot'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{id}/timeslots/{slotId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Event ID
      - name: slotId
        in: path
        required: true
        schema:
          type: integer
        description: Time Slot ID
    put:
      summary: Update a time slot
      operationId: updateTimeSlot
      tags:
        - TimeSlots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlotInput'
      responses:
        '200':
          description: Time slot updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Time slot updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a time slot
      operationId: deleteTimeSlot
      tags:
        - TimeSlots
      responses:
        '200':
          description: Time slot deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Time slot deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{id}/recommendations:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Event ID
    get:
      summary: Get time slot recommendations for an event
      operationId: getRecommendations
      tags:
        - Recommendations
      responses:
        '200':
          description: List of time slot recommendations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlotRecommendation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users:
    get:
      summary: List all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
    get:
      summary: Get user details
      operationId: getUser
      tags:
        - Users
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - Users
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{id}/events/{eventId}/availability:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: User ID
      - name: eventId
        in: path
        required: true
        schema:
          type: integer
        description: Event ID
    get:
      summary: Get user availability for an event
      operationId: getUserAvailability
      tags:
        - Availability
      responses:
        '200':
          description: User availability details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAvailability'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create user availability for an event
      operationId: createAvailability
      tags:
        - Availability
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAvailabilityInput'
      responses:
        '201':
          description: Availability created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAvailability'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        organizer_id:
          type: integer
        duration_minutes:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    EventInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        organizer_id:
          type: integer
        duration_minutes:
          type: integer
      required:
        - title
        - organizer_id
        - duration_minutes
    TimeSlot:
      type: object
      properties:
        id:
          type: integer
        event_id:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TimeSlotInput:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
      required:
        - start_time
        - end_time
    TimeSlotRecommendation:
      type: object
      properties:
        time_slot:
          $ref: '#/components/schemas/TimeSlot'
        matching_users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        non_matching_users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        matching_percentage:
          type: number
        event_duration:
          type: integer
        start_options:
          type: array
          items:
            type: string
            format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        timezone:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        timezone:
          type: string
      required:
        - name
        - email
        - timezone
    UserAvailability:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        event_id:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserAvailabilityInput:
      type: object
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
      required:
        - start_time
        - end_time
  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
